{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["export type CameraPosition = \"rear\" | \"front\";\nexport interface CameraPreviewOptions {\n  /** Parent element to attach the video preview element to (applicable to the web platform only) */\n  parent?: string;\n  /** Class name to add to the video preview element (applicable to the web platform only) */\n  className?: string;\n  /** The preview width in pixels, default window.screen.width */\n  width?: number;\n  /** The preview height in pixels, default window.screen.height */\n  height?: number;\n  /** The x origin, default 0 (applicable to the android and ios platforms only) */\n  x?: number;\n  /** The y origin, default 0 (applicable to the android and ios platforms only) */\n  y?: number;\n  /**  Brings your html in front of your preview, default false (applicable to the android only) */\n  toBack?: boolean;\n  /** The preview bottom padding in pixes. Useful to keep the appropriate preview sizes when orientation changes (applicable to the android and ios platforms only) */\n  paddingBottom?: number;\n  /** Rotate preview when orientation changes (applicable to the ios platforms only; default value is true) */\n  rotateWhenOrientationChanged?: boolean;\n  /** Choose the camera to use 'front' or 'rear', default 'front' */\n  position?: CameraPosition | string;\n  /** Defaults to false - Capture images to a file and return the file path instead of returning base64 encoded data */\n  storeToFile?: boolean;\n  /** Defaults to false - Android Only - Disable automatic rotation of the image, and let the browser deal with it (keep reading on how to achieve it) */\n  disableExifHeaderStripping?: boolean;\n  /** Defaults to false - iOS only - Activate high resolution image capture so that output images are from the highest resolution possible on the device **/\n  enableHighResolution?: boolean;\n  /** Defaults to false - Web only - Disables audio stream to prevent permission requests and output switching */\n  disableAudio?: boolean;\n  /**  Android Only - Locks device orientation when camera is showing. */\n  lockAndroidOrientation?: boolean;\n  /** Defaults to false - Android and Web only.  Set if camera preview can change opacity. */\n  enableOpacity?: boolean;\n  /** Defaults to false - Android only.  Set if camera preview will support pinch to zoom. */\n  enableZoom?: boolean;\n  /** default to false - IOS only. Set the CameraPreview to use the video mode preset */\n  cameraMode?: boolean;\n}\n\nexport interface CameraPreviewPictureOptions {\n  /** The picture height, optional, default 0 (Device default) */\n  height?: number;\n  /** The picture width, optional, default 0 (Device default) */\n  width?: number;\n  /** The picture quality, 0 - 100, default 85 */\n  quality?: number;\n  /** The picture format, jpeg or png, default jpeg on `Web`.\n   *\n   * quality has no effect on png */\n  format?: PictureFormat;\n}\n\nexport type PictureFormat = \"jpeg\" | \"png\";\n\nexport interface CameraSampleOptions {\n  /** The picture quality, 0 - 100, default 85 */\n  quality?: number;\n}\n\nexport type CameraPreviewFlashMode =\n  | \"off\"\n  | \"on\"\n  | \"auto\"\n  | \"red-eye\"\n  | \"torch\";\n\nexport interface CameraOpacityOptions {\n  /** The percent opacity to set for camera view, default 1 */\n  opacity?: number;\n}\n\nexport interface CameraPreviewPlugin {\n  /**\n   * Start the camera preview instance.\n   * @param {CameraPreviewOptions} options the options to start the camera preview with\n   * @returns {Promise<void>} an Promise that resolves when the instance is started\n   * @throws An error if the something went wrong\n   * @since 0.0.1\n   */\n  start(options: CameraPreviewOptions): Promise<{ depthParamsSupported: boolean }>;\n  /**\n   * Stop the camera preview instance.\n   * @returns {Promise<void>} an Promise that resolves when the instance is stopped\n   * @throws An error if the something went wrong\n   * @since 0.0.1\n   */\n  stop(): Promise<void>;\n  /**\n   * Switch camera.\n   * @param {CameraPreviewOptions} options the options to switch the camera with\n   * @returns {Promise<void>} an Promise that resolves when the camera is switched\n   * @throws An error if the something went wrong\n   * @since 0.0.1\n   */\n  capture(options: CameraPreviewPictureOptions): Promise<{ value: string }>;\n  /**\n   * Capture a sample image.\n   * @param {CameraSampleOptions} options the options to capture the sample image with\n   * @returns {Promise<string>} an Promise that resolves with the sample image as a base64 encoded string\n   * @throws An error if the something went wrong\n   * @since 0.0.1\n   */\n  captureSample(options: CameraSampleOptions): Promise<{ value: string }>;\n  /**\n   * Get supported flash modes.\n   * @returns {Promise<CameraPreviewFlashMode[]>} an Promise that resolves with the supported flash modes\n   * @throws An error if the something went wrong\n   * @since 0.0.1\n   */\n  getSupportedFlashModes(): Promise<{\n    result: CameraPreviewFlashMode[];\n  }>;\n  /**\n   * Get horizontal field of view.\n   * @returns {Promise<any>} an Promise that resolves with the horizontal field of view\n   * @throws An error if the something went wrong\n   * @since 0.0.1\n   */\n  getHorizontalFov(): Promise<{\n    result: any;\n  }>;\n  /**\n   * Gets the supported picture sizes for a given device.\n   * @returns {Promise<any>} an Promise that resolves with the supported picture sizes for a given device\n   * @throws An error if the something goes wrong\n   */\n  getSupportedPictureSizes(): Promise<{\n    supportedPictureSizes: {\n      facing: string;\n      supportedPictureSizes: { width: number; height: number }[];\n    }[];\n  }>;\n  /**\n   * Set flash mode.\n   * @param options the options to set the flash mode with\n   * @returns {Promise<void>} an Promise that resolves when the flash mode is set\n   * @throws An error if the something went wrong\n   * @since 0.0.1\n   */\n  setFlashMode(options: {\n    flashMode: CameraPreviewFlashMode | string;\n  }): Promise<void>;\n  /**\n   * Flip camera.\n   * @returns {Promise<void>} an Promise that resolves when the camera is flipped\n   * @throws An error if the something went wrong\n   * @since 0.0.1\n   */\n  flip(): Promise<{ depthParamsSupported: boolean }>;\n  /**\n   * Set opacity.\n   * @param {CameraOpacityOptions} options the options to set the camera opacity with\n   * @returns {Promise<void>} an Promise that resolves when the camera color effect is set\n   * @throws An error if the something went wrong\n   * @since 0.0.1\n   */\n  setOpacity(options: CameraOpacityOptions): Promise<void>;\n  /**\n   * Stop recording video.\n   * @param {CameraPreviewOptions} options the options to stop recording video with\n   * @returns {Promise<{videoFilePath: string}>} an Promise that resolves when the camera zoom is set\n   * @throws An error if the something went wrong\n   * @since 0.0.1\n   */\n  stopRecordVideo(): Promise<{ videoFilePath: string, calibrationData?: Record<string, Record<string, number[] | number>> }>;\n  /**\n   * Start recording video.\n   * @param {CameraPreviewOptions} options the options to start recording video with\n   * @returns {Promise<void>} an Promise that resolves when the video recording is started\n   * @throws An error if the something went wrong\n   * @since 0.0.1\n   */\n  startRecordVideo(options: CameraPreviewOptions): Promise<void>;\n}\n"]}